exit
total-de-vidas
(+ 10 2)
(* 7 6)
(/ 6 3)
(+ 2 (+ 1 2))
(+ 4 (+ 1 2))
(- 7 (+ 4 (+ 1 20)))
(- (+ 4 (+ 1 20)) 7)
(+ (* 5 (/ 10 2)) 1)
(defn mult2 [x] (* x 2))
(mult2 2)
(defn mult2x [x] (* x (+ 2 x)))
(mult2x 2)
(^ 2 3)
(Math/pow 2 3)
(Math/pow 3 2)
(Math/pow 3 3)
(Math/pow 2 3)
(defn pow3 [x] (* x (Math/pow 2 x)))
(pow3 3)
(print "VocÃª perdeu")
perdeu
exit
(perdeu)
exit
(perdeu)
(require '[forca.core :as forca] :reload)
(require '[jogo-forca.core :as forca] :reload)
(forca/jogo 6)
(require '[jogo-forca.core :as forca] :reload)
(forca/jogo 6)
(require '[jogo-forca.core :as forca] :reload)
(forca/jogo 6)
(not= 10 10)
exit
(fib 0)
(require '[jogo-forca.core :as forca] :reload)
(fib 0)
(fib 1)
(fib 2)
(fib 3)
(fib 4)
(fib 5)
(fib 6)
(fib 20)
exit
(forca/jogo 6)
(jogo-forca 6)
(jogo-forca/jogo 6)
(jogo 6)
(jogo 6 "MELANCIA" #{"A" "M"})
(require '[forca.core: as forca] :reload)
(require '[jogo-forca.core: as forca] :reload)
(require '[jogo-forca.core: as jogo-forca] :reload)
(require '[jogo-forca.core :as forca] :reload)
(forca/jogo 5 "MELANCIA" #{"A" "M"} )
(require '[jogo-forca.core :as forca] :reload)
(forca/jogo 5 "MELANCIA" #{"A" "M"} )
(require '[jogo-forca.core :as forca] :reload)
(forca/jogo 5 "MELANCIA" #{"A" "M"} )
(defn mult2 [x] (* x 2))
(mult2 2)
(mult2 5)
(map mult [2 4 6 8 10])
(map mult2 [2 4 6 8 10])
(reduce)
(reduce (fn [x] (= 0 (% x 2))) [1 2 3 4 5 6 7 8 9 10])
(reduce (fn [x] (= 0 (mod x 2))) [1 2 3 4 5 6 7 8 9 10])
(defn par [x] (= 0 (mod x 2)))
(par 3)
(par 2)
(remove par [1 2 3 4 5 6 7 8 9 10])
(require '[jogo-forca.core :as forca] :reload)
(forca/jogo 5 "MELANCIA" #{"A" "M"} )
(require '[jogo-forca.core :as forca] :reload)
(forca/jogo 5 "MELANCIA" #{"A" "M"} )
(require '[jogo-forca.core :as forca] :reload)
(forca/jogo 5 "MELANCIA" #{"A" "M"} )
(require '[jogo-forca.core :as forca] :reload)
(forca/jogo/letras-faltantes )
(forca/letras-faltantes "MELANCIA" #{"M" "E"})
(forca/letras-faltantes "MELANCIA" #{"M" "E" "A"})
(forca/letras-faltantes "MELANCIA" #{"M" "E" "A" "L" "N" "C" "I"})
(require '[jogo-forca.core :as forca] :reload)
(forca/jogo 5 "MELANCIA" #{"A" "M"} )
(forca/jogo 5 "MELANCIA" #{"A" "M" "L"} )
(forca/jogo 5 "MELANCIA" #{"A" "M" "L" "E" "N" "C"} )
(forca/jogo 5 "MELANCIA" #{"A" "M" "L" "E" "N" "C" "I"} )
(def numeros [1 2 3 4 5])
(def carros [50000.0 60000.0])
carros
(def impar [x] (= 1 (mod x 2)))
(defn impar [x] (= 1 (mod x 2)))
(impar numeros)
(impar 3)
(impar 2 )
(remove impar numeros)
(map (fn [x] * x 3) numeros)
(map (fn [x] (* x 3)) numeros)
(filter (fn [x] (or (> x 4) (< x 2) )) numeros )
def palavra #{"A" "L" "U" "R"}
(def palavra #{"A" "L" "U" "R"})
(contains? "A" palavra)
(contains? palavra 'A')
(contains? palavra "A")
(contains? palavra "O")
(require '[jogo-forca.core :as forca] :reload)
(forca/jogo 2 "MELANCIA" #{})
(require '[jogo-forca.core :as forca] :reload)
(forca/jogo 2 "MELANCIA" #{})
(defn le-letra! [] (read-line))
(le-letra!)
(defn mult7 [x] (* 7 (Integer/parseInt x))
)
(mult7 le-letra!)
(mult7 (le-letra!))
exit
(require '[jogo-forca.core :as forca] :reload)
(forca/jogo 2 "MELANCIA" #{})
(require '[jogo-forca.core :as forca] :reload)
(forca/jogo 2 "MELANCIA" #{})
(require '[jogo-forca.core :as forca] :reload)
(forca/jogo 2 "MELANCIA" #{})
(require '[jogo-forca.core :as forca] :reload)
(forca/jogo 2 "MELANCIA" #{})
(require '[jogo-forca.core :as forca] :reload)
(forca/fibrecur 5)
(require '[jogo-forca.core :as forca] :reload)
(forca/soma 5)
(forca/soma 6)
exit
